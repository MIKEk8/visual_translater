name: Screen Translator CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce job count
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-rus tesseract-ocr-eng
        sudo apt-get install -y xvfb  # For headless GUI testing

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract
        brew install tesseract-lang

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install Tesseract
        choco install tesseract --pre

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov mypy black isort flake8

    - name: Code formatting check (Black)
      run: |
        black --check src/ --line-length 100

    - name: Import sorting check (isort)
      run: |
        isort --check-only src/ --profile black

    - name: Linting (flake8)
      run: |
        flake8 src/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Type checking (mypy)
      run: |
        mypy src/ --ignore-missing-imports --check-untyped-defs

    - name: Run unit tests
      run: |
        # Run tests with coverage
        python -m pytest src/tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        # Set environment variables for testing
        PYTHONPATH: .

    - name: Run integration tests (Ubuntu/macOS only)
      if: matrix.os != 'windows-latest'
      run: |
        # Run integration tests with virtual display on Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          xvfb-run -a python -m pytest src/tests/integration/ -v
        else
          python -m pytest src/tests/integration/ -v
        fi
      env:
        PYTHONPATH: .

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --icon=icon.ico --name=ScreenTranslator-${{ runner.os }} main.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ScreenTranslator-${{ runner.os }}
        path: dist/

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ScreenTranslator-Linux/*
          ScreenTranslator-Windows/*
          ScreenTranslator-macOS/*
        draft: true
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=screen-translator
          -Dsonar.organization=your-org
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.xunit.reportPath=test-results.xml