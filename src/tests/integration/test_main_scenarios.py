"""
Integration Tests for Main Scenarios - Screen Translator v2.0
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import queue
import threading
import time
import unittest
from typing import Dict, List
from unittest.mock import MagicMock, Mock, patch

from src.models.config import AppConfig, HotkeyConfig, LanguageConfig, TTSConfig
from src.services.container import DIContainer

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from src.services.task_queue import TaskPriority, TaskQueue
from src.services.translation_cache import TranslationCache
from src.utils.logger import logger


class TestMainScenarios(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.container = DIContainer()
        self.task_queue = TaskQueue(num_workers=2)
        self.task_queue.start()
        self.translation_cache = TranslationCache()

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        self.task_queue.stop()
        self.container.clear()

    def test_scenario_screenshot_to_translation(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –°–∫—Ä–∏–Ω—à–æ—Ç -> OCR -> –ü–µ—Ä–µ–≤–æ–¥ -> TTS"""
        print("\nüß™ Testing: Screenshot -> OCR -> Translation -> TTS")

        # –ú–æ–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        mock_screenshot = Mock(return_value={"image": "test_image", "bounds": (0, 0, 100, 100)})
        mock_ocr = Mock(return_value=("Hello world", 0.95))
        mock_translate = Mock(return_value="–ü—Ä–∏–≤–µ—Ç –º–∏—Ä")
        mock_tts = Mock()

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
        class ScreenshotEngine:
            pass

        class OCRProcessor:
            pass

        class Translator:
            pass

        class TTSProcessor:
            pass

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        self.container.register_instance(ScreenshotEngine, mock_screenshot)
        self.container.register_instance(OCRProcessor, mock_ocr)
        self.container.register_instance(Translator, mock_translate)
        self.container.register_instance(TTSProcessor, mock_tts)

        # –°–∏–º—É–ª—è—Ü–∏—è workflow
        results = queue.Queue()

        def screenshot_workflow():
            try:
                # 1. –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                screenshot = self.container.get(ScreenshotEngine)()

                # 2. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
                text, confidence = self.container.get(OCRProcessor)(screenshot["image"])

                # 3. –ü–µ—Ä–µ–≤–æ–¥
                translation = self.container.get(Translator)(text)

                # 4. TTS –æ–∑–≤—É—á–∫–∞
                self.container.get(TTSProcessor)(translation)

                results.put(
                    {
                        "success": True,
                        "text": text,
                        "translation": translation,
                        "confidence": confidence,
                    }
                )

            except Exception as e:
                results.put({"success": False, "error": str(e)})

        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ TaskQueue
        task_id = self.task_queue.submit(screenshot_workflow, name="screenshot_workflow")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = self.task_queue.wait_for_task(task_id, timeout=5)
        self.assertTrue(success)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result = results.get(timeout=1)
        self.assertTrue(result["success"])
        self.assertEqual(result["text"], "Hello world")
        self.assertEqual(result["translation"], "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä")
        self.assertEqual(result["confidence"], 0.95)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤
        mock_screenshot.assert_called_once()
        mock_ocr.assert_called_once()
        mock_translate.assert_called_once_with("Hello world")
        mock_tts.assert_called_once_with("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä")

    def test_scenario_hotkey_quick_translate(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ -> –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ–±–ª–∞—Å—Ç–∏"""
        print("\nüß™ Testing: Hotkey -> Quick Translate")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        hotkey_config = HotkeyConfig(area_select="ctrl+shift+a", quick_center="ctrl+shift+q")

        # –ú–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        captured_hotkeys = []

        def mock_hotkey_handler(hotkey: str):
            captured_hotkeys.append(hotkey)

            if hotkey == hotkey_config.quick_center:
                # –°–∏–º—É–ª—è—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                task_id = self.task_queue.submit(
                    lambda: {"translated": "Quick translation result"},
                    name="quick_translate",
                    priority=TaskPriority.HIGH,
                )
                return task_id

        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
        task_id = mock_hotkey_handler("ctrl+shift+q")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.assertIn("ctrl+shift+q", captured_hotkeys)
        self.assertIsNotNone(task_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        success = self.task_queue.wait_for_task(task_id, timeout=2)
        self.assertTrue(success)

        result = self.task_queue.get_task_result(task_id)
        self.assertEqual(result["translated"], "Quick translation result")

    def test_scenario_batch_image_processing(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("\nüß™ Testing: Batch Image Processing")

        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_images = [f"image_{i}.png" for i in range(5)]

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_results = []

        def process_image(image_path: str) -> Dict:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

            result = {
                "image": image_path,
                "text": f"Text from {image_path}",
                "translation": f"–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ {image_path}",
                "timestamp": time.time(),
            }

            return result

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
        task_ids = []
        for image in test_images:
            task_id = self.task_queue.submit(
                process_image, args=(image,), name=f"process_{image}", priority=TaskPriority.NORMAL
            )
            task_ids.append(task_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        start_time = time.time()

        for task_id in task_ids:
            success = self.task_queue.wait_for_task(task_id, timeout=5)
            self.assertTrue(success)

            result = self.task_queue.get_task_result(task_id)
            processed_results.append(result)

        end_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.assertEqual(len(processed_results), 5)

        for i, result in enumerate(processed_results):
            self.assertEqual(result["image"], f"image_{i}.png")
            self.assertIn("Text from", result["text"])
            self.assertIn("–ü–µ—Ä–µ–≤–æ–¥ –∏–∑", result["translation"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_time = end_time - start_time
        print(f"   ‚è±Ô∏è Total processing time: {total_time:.2f}s")

        # –° 2 –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        self.assertLess(total_time, 0.5 * len(test_images))

    def test_scenario_translation_with_cache(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        print("\nüß™ Testing: Translation with Cache")

        # –°—á–µ—Ç—á–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        translation_calls = 0

        def mock_translate(text: str) -> str:
            nonlocal translation_calls
            translation_calls += 1
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            return f"Translated: {text}"

        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
        texts = ["Hello", "World", "Hello", "Test", "World", "Hello"]
        results = []

        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –∫—ç—à –ø—É—Å—Ç–æ–π
        for text in texts:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached = self.translation_cache.get(text, "en", "ru")

            if cached:
                results.append(cached)
            else:
                # –ü–µ—Ä–µ–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
                translation = mock_translate(text)
                self.translation_cache.add(text, translation, "en", "ru")
                results.append(translation)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.assertEqual(len(results), 6)
        self.assertEqual(translation_calls, 3)  # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã

        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫—ç—à–µ
        translation_calls = 0
        cached_results = []

        for text in texts:
            cached = self.translation_cache.get(text, "en", "ru")
            self.assertIsNotNone(cached)
            cached_results.append(cached)

        self.assertEqual(translation_calls, 0)  # –í—Å–µ –∏–∑ –∫—ç—à–∞
        self.assertEqual(results, cached_results)

    def test_scenario_error_recovery(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        print("\nüß™ Testing: Error Recovery")

        # –§—É–Ω–∫—Ü–∏—è —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —Å–±–æ—è–º–∏
        attempt_count = 0

        def unreliable_service():
            nonlocal attempt_count
            attempt_count += 1

            if attempt_count < 3:
                raise Exception(f"Service failed (attempt {attempt_count})")

            return "Success after retries"

        # –§—É–Ω–∫—Ü–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
        def with_retry(func, max_attempts=3):
            for attempt in range(max_attempts):
                try:
                    return func()
                except Exception as e:
                    if attempt == max_attempts - 1:
                        raise
                    time.sleep(0.1 * (attempt + 1))  # Exponential backoff

        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ TaskQueue
        task_id = self.task_queue.submit(
            lambda: with_retry(unreliable_service), name="unreliable_task"
        )

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = self.task_queue.wait_for_task(task_id, timeout=5)
        self.assertTrue(success)

        result = self.task_queue.get_task_result(task_id)
        self.assertEqual(result, "Success after retries")
        self.assertEqual(attempt_count, 3)

    def test_scenario_concurrent_users(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        print("\nüß™ Testing: Concurrent Requests")

        # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        active_requests = 0
        max_concurrent = 0
        lock = threading.Lock()

        def simulate_request(request_id: int):
            nonlocal active_requests, max_concurrent

            with lock:
                active_requests += 1
                max_concurrent = max(max_concurrent, active_requests)

            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time.sleep(0.2)

            with lock:
                active_requests -= 1

            return f"Request {request_id} completed"

        # –ó–∞–ø—É—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        num_requests = 10
        task_ids = []

        for i in range(num_requests):
            task_id = self.task_queue.submit(
                simulate_request, args=(i,), name=f"request_{i}", priority=TaskPriority.NORMAL
            )
            task_ids.append(task_id)

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        results = []
        for task_id in task_ids:
            success = self.task_queue.wait_for_task(task_id, timeout=10)
            self.assertTrue(success)
            results.append(self.task_queue.get_task_result(task_id))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.assertEqual(len(results), num_requests)
        print(f"   üîÑ Max concurrent requests: {max_concurrent}")

        # –° 2 –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.assertLessEqual(max_concurrent, 2)

    def test_scenario_memory_efficiency(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüß™ Testing: Memory Efficiency")

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        num_tasks = 100

        # –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –¥–∞–Ω–Ω—ã–µ
        def generate_data(size_kb: int):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            data = "x" * (size_kb * 1024)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä, –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ
            return len(data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á
        task_ids = []
        for i in range(num_tasks):
            task_id = self.task_queue.submit(
                generate_data, args=(10,), name=f"memory_test_{i}"  # 10KB –Ω–∞ –∑–∞–¥–∞—á—É
            )
            task_ids.append(task_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        queue_size = self.task_queue.get_queue_size()
        print(f"   üìä Queue size during processing: {queue_size}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        completed = 0
        for task_id in task_ids:
            if self.task_queue.wait_for_task(task_id, timeout=0.1):
                completed += 1

        print(f"   ‚úÖ Completed tasks: {completed}/{num_tasks}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.task_queue.get_stats()
        print(f"   üìä Queue stats: {stats}")

        self.assertGreater(completed, 0)
        self.assertEqual(stats["total_tasks"], num_tasks)


class TestPerformanceScenarios(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.task_queue = TaskQueue(num_workers=4)
        self.task_queue.start()

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        self.task_queue.stop()

    def test_performance_high_load(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüß™ Testing: High Load Performance")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
        num_tasks = 1000
        results = []

        def cpu_bound_task(n):
            """CPU-intensive –∑–∞–¥–∞—á–∞"""
            return sum(i * i for i in range(n))

        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        start_time = time.time()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á
        task_ids = []
        for i in range(num_tasks):
            task_id = self.task_queue.submit(cpu_bound_task, args=(100,), name=f"cpu_task_{i}")
            task_ids.append(task_id)

        submit_time = time.time() - start_time

        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed = 0
        timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

        while completed < len(task_ids) and (time.time() - start_time) < timeout:
            for task_id in task_ids[completed:]:
                if self.task_queue.get_task_status(task_id) == "completed":
                    completed += 1
            time.sleep(0.01)

        execution_time = time.time() - start_time

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"   üìä Tasks submitted: {num_tasks}")
        print(f"   ‚è±Ô∏è Submit time: {submit_time:.3f}s ({num_tasks/submit_time:.1f} tasks/sec)")
        print(f"   ‚è±Ô∏è Total execution time: {execution_time:.3f}s")
        print(f"   ‚úÖ Tasks completed: {completed}")
        print(f"   üìà Throughput: {completed/execution_time:.1f} tasks/sec")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.assertLess(submit_time, 1.0)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π
        self.assertGreater(completed / execution_time, 50)  # –ú–∏–Ω–∏–º—É–º 50 –∑–∞–¥–∞—á/—Å–µ–∫
        self.assertGreater(completed, num_tasks * 0.9)  # 90%+ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è


if __name__ == "__main__":
    unittest.main(verbosity=2)
