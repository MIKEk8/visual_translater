import json
import os
import queue
import threading

try:
    from tkinter import messagebox
except ImportError:
    print(f"tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ {__name__}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    from src.utils.mock_gui import messagebox

from typing import TYPE_CHECKING

try:
    import pystray
except ImportError:
    print(f"pystray –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock
    from src.utils.mock_pystray import *

from PIL import Image

# Avoid circular import
if TYPE_CHECKING:
    from src.core.application import ScreenTranslatorApp  # noqa: F401 - Used in type hints

from src.utils.logger import logger


class TrayManager:
    """System tray manager for Screen Translator"""

    def __init__(self, app: "ScreenTranslatorApp"):
        self.app = app
        self.icon = None
        self.gui_queue = queue.Queue()
        self.is_running = False

        logger.debug("Tray manager initialized")

    def start(self):
        """Start tray manager"""
        if self.is_running:
            return

        self.setup_tray()
        self.start_message_processing()
        self.is_running = True

        logger.info("Tray manager started")

    def stop(self):
        """Stop tray manager"""
        self.is_running = False
        try:
            if self.icon:
                self.icon.stop()
        except Exception as e:
            logger.warning(f"Error stopping tray icon: {e}")
        logger.info("Tray manager stopped")

    def setup_tray(self):
        """Setup system tray icon and menu"""
        menu = pystray.Menu(
            pystray.MenuItem("–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", self._activate_capture, default=True),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(
                "–ë—ã—Å—Ç—Ä—ã–µ –æ–±–ª–∞—Å—Ç–∏",
                pystray.Menu(
                    pystray.MenuItem("üì± –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞", self._quick_center),
                    pystray.MenuItem("üì∫ –°—É–±—Ç–∏—Ç—Ä—ã (–Ω–∏–∑)", self._quick_bottom),
                ),
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("–ò—Å—Ç–æ—Ä–∏—è", self._show_history),
            pystray.MenuItem("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self._open_settings),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("–õ–æ–≥", self._show_log),
            pystray.MenuItem("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self._show_info),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("–í—ã—Ö–æ–¥", self._exit_app),
        )

        self.icon = pystray.Icon(
            "screen_translator", self._load_icon(), "Screen Translator v2.0", menu=menu
        )

        # Run icon in separate thread
        threading.Thread(target=self.icon.run, daemon=True).start()

    def _load_icon(self) -> Image.Image:
        """Load tray icon"""
        try:
            icon_path = "icon.ico"
            if os.path.exists(icon_path):
                return Image.open(icon_path)
            else:
                # Create default icon
                return Image.new("RGB", (64, 64), color="blue")
        except Exception as e:
            logger.error("Failed to load tray icon", error=e)
            return Image.new("RGB", (64, 64), color="red")

    def start_message_processing(self):
        """Start processing GUI messages"""
        self._check_messages()

    def _check_messages(self):
        """Check and process GUI messages"""
        try:
            while not self.gui_queue.empty():
                func, args = self.gui_queue.get_nowait()
                logger.debug(
                    f"Tray: Processing GUI action: {func.__name__ if hasattr(func, '__name__') else str(func)}"
                )
                func(*args)
        except Exception as e:
            logger.error("Error in GUI message queue", error=e)

        # Schedule next check (only if app is still running)
        if self.is_running:
            try:
                if self.app and hasattr(self.app, "root") and self.app.root:
                    self.app.root.after(100, self._check_messages)
                else:
                    # If no root window available, schedule with threading
                    threading.Timer(0.1, self._check_messages).start()
            except Exception as e:
                logger.debug(f"Could not schedule next message check: {e}")
                # Fallback to direct threading
                if self.is_running:
                    threading.Timer(0.1, self._check_messages).start()

    # Menu event handlers
    def _activate_capture(self, icon=None, item=None):
        """Activate area capture"""
        if self.app:
            self.gui_queue.put((self.app.capture_area, ()))

    def _quick_center(self, icon=None, item=None):
        """Quick capture center area"""
        if self.app:
            self.gui_queue.put((self.app.capture_center, ()))

    def _quick_bottom(self, icon=None, item=None):
        """Quick capture bottom area (subtitles)"""
        if self.app:
            self.gui_queue.put((self.app.capture_subtitles, ()))

    def _show_history(self, icon=None, item=None):
        """Show translation history"""
        if self.app:
            self.gui_queue.put((self.app.show_history, ()))

    def _open_settings(self, icon=None, item=None):
        """Open settings window"""
        if self.app:
            self.gui_queue.put((self.app.open_settings, ()))

    def _show_log(self, icon=None, item=None):
        """Show application log"""
        log_path = "screen_translator.log"
        if os.path.exists(log_path):
            try:
                with open(log_path, "r", encoding="utf-8") as f:
                    log_content = f.read()

                # Show last 100 lines
                lines = log_content.split("\n")
                recent_lines = lines[-100:] if len(lines) > 100 else lines
                recent_content = "\n".join(recent_lines)

                self.gui_queue.put((messagebox.showinfo, ("–õ–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", recent_content)))
            except Exception as e:
                self.gui_queue.put(
                    (
                        messagebox.showerror,
                        ("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥: {str(e)}"),
                    )
                )
        else:
            self.gui_queue.put((messagebox.showwarning, ("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")))

    def _show_info(self, icon=None, item=None):
        """Show about information"""
        info_text = """Screen Translator v2.0

–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —ç–∫—Ä–∞–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ú–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ Google Translate  
‚Ä¢ –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (TTS)
‚Ä¢ –ì–∏–±–∫–∏–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

        self.gui_queue.put((messagebox.showinfo, ("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", info_text)))

    def _exit_app(self, icon=None, item=None):
        """Exit application"""
        if self.app:
            logger.info("Tray: Exit requested")
            self.gui_queue.put((self.app.shutdown, ()))

    def show_notification(self, title: str, message: str, duration: int = 3):
        """Show system notification"""
        if self.icon:
            try:
                self.icon.notify(message, title)
            except Exception as e:
                logger.error("Failed to show notification", error=e, title=title)
